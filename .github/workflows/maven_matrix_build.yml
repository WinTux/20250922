name: CI con Matrix builds

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-y-test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        java: [21, 24]
    name: Pruebas de Java ${{ matrix.java }} en ${{ matrix.os }}
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
    - name: Cache de paquetes Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{hashFiles('**/pom.xml')}}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build y Test
      run: mvn clean verify
    - name: Ejecutar análisis de código
      run: mvn sonar:sonar -Dsonar.projectKey=WinTux_20250922 -Dsonar.organization=wintux-1 -Dsonar.host.url=https://sonarcloud.io
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  deploy:
    needs: build-y-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: checkout de código
        uses: actions/checkout@v4
      - name: Preparando el JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Cache de dependencias
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ubuntu-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ubuntu-maven
      - name: Compilación de la aplicación
        run: ./mvnw clean package -DskipTests
      - name: Upload de JAR a workflow artifacts
        uses: actions/upload-artifact@v3
        with:
          name: springboot-app
          path: target/*.jar
          #Pendiende para agregar un job o 2
      - name: Deploy a producción
        run: |
          echo "Realizando el deploy..."
          # Usando el comando scp subimos el *.jar al servidor
          # scp pepe@192.168.1.123:/var/logs...
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
